import streamlit as st
from py2neo import Graph
from geopy.geocoders import Nominatim
import folium
from streamlit_folium import folium_static 
import pandas as pd
import matplotlib.pyplot as plt
import dict_correspondance
from  dict_correspondance import *
import seaborn as sns
import os





# Cr√©ation de Neo4jRepository object
neo4j_uri       = os.environ.get('neo4j_uri')
neo4j_user      = os.environ.get('neo4j_user')
neo4j_password  = os.environ.get('neo4j_password')

try:
    URI = st.secrets['neo4j_uri']
    AUTH = (st.secrets['neo4j_user'], st.secrets['neo4j_password'])
except:
    URI = neo4j_uri
    AUTH = (neo4j_user, neo4j_password)
    

# Connexion √† la base de donn√©es Neo4j
graph = Graph(URI, auth=AUTH)

st.write("# Bienvenue sue l'application de suivi des accidents de la route en France üëã")
# st.sidebar.success("Navigez pour voir le contenu")

st.markdown('''Nos donn√©es proviennent du fichier national des accidents corporels de la circulation administr√© par \
    l‚ÄôObservatoire National Interminist√©riel de la S√©curit√© Routi√®re disponibles sur le site data.gouv.fr . \
        Il s‚Äôagit de donn√©es ouvertes r√©pertoriant l‚Äôint√©gralit√© des accidents corporels survenus durant \
            une ann√©e pr√©cise en France M√©tropolitaine, dans les DOM et TOM. On y retrouve 4 fichiers diff√©rents‚ÄØ: 

Informations de localisation de l‚Äôaccident,  

Informations concernant les caract√©ristiques de l‚Äôaccident,  

Informations sur les victimes 

Les v√©hicules impliqu√©s.  



Compte tenu de certains indicateurs mis √† jour √† partir de 2019, il est pr√©conis√© de ne pas comparer les donn√©es √† \
    partir de 2019 avec celles des ann√©es pr√©c√©dentes. Ceci explique notre horizon temporel (2019-2021).  

Ces jeux de donn√©es sont riches et tr√®s int√©ressants car ils brassent depuis plus de 15 ans un nombre important de\
     variables de tous genres. Ils sont mis √† jour annuellement et sont d‚Äôun int√©r√™t g√©n√©ral.  
 
 L'exploitation des donn√©es est faite avec Neo4j, un syst√®me de gestion de base de donn√©es au code source libre bas√© \
    sur les graphes, d√©velopp√© en Java par la soci√©t√© Neo technology. Le produit existe depuis 2000, la version 1.0 \
        est sortie en f√©vrier 2010 (source wikipedia)
 ''')


st.write(''' ## Accident ayant impliqu√© le plus de v√©hicules et de victimes  ''')

# Convertir l'adresse en coordonn√©es
# latitude, longitude = geocode_address(address)
# print(latitude, longitude)
# Ex√©cuter la requ√™te Neo4j pour trouver les accidents dans un rayon autour de l'adresse
query = f"""        
MATCH (n)
RETURN n, size([(n)-[r]->() | r]) as degree
ORDER BY degree DESC
LIMIT 1;
"""

results  = graph.run(query).to_data_frame()
df  = pd.DataFrame.from_records(results['n'])



# Afficher les r√©sultats de la requ√™te sous forme de graphe Neo4j
st.subheader("R√©sultats de la requ√™te")




# Transformer les donn√©es : 

df['Date'] = df['An'].astype('str') + '-' + df['Mois'].astype('str') + '-' + df['Jour'].astype('str') + ' ' + df['Heure']
df.insert(0, 'Date', df.pop('Date'), allow_duplicates=False)
df['Date'] = pd.to_datetime(df['Date']) 
df.drop(columns=['An', 'Mois', 'Jour', 'Heure'], inplace=True)       

# for titre in df.columns:
#     try:
#         df[str(titre)] = df[str(titre)].astype('int')
#     except:
#         st.write(titre, 'not converted')
#         continue


dc = dict_correspondance.__dict__ 
# st.write(d)

# R√©cup√©ration des correspondances
def trouv_corresp(df):
    for titre in df.columns:
        try:
            df[titre] = df[titre].astype('int')
        except:
            continue

    for col in df.columns:
        try:
            ref = dc[col]
            ref = dic_convert(ref)            
            for k,v in ref.items():
                print("cle : ", k,", val : ", v, "col :", col )
                df[col].replace(v, k.replace('_', " "), inplace=True)
        except :
            continue 
    return df
df1 = trouv_corresp(df)

st.write(df1)


# df["Adresse_postale"] = df.Adresse_postale.str.replace("  ", "")





